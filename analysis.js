// List of ports associated with common attacks.
var vulnerablePorts = [22, 25, 23, 5900, 8080, 445, 3389, 50864, 123, 53413, 1433];

// Boilerplate for reading large JSON file.
// Courtesy of https://stackoverflow.com/a/16013228
var fs = require('fs'),
    readline = require('readline'),
    stream = require('stream');

var instream = fs.createReadStream('shodan-export.json');
var outstream = new stream;
outstream.readable = true;
outstream.writable = true;

var rl = readline.createInterface({
    input: instream,
    output: outstream,
    terminal: false
});

// Reduced data.
var reduction = {};

// Process file
rl.on('line', function(line) {

    // Parse JSON line.
    var shodan = JSON.parse(line);

    // Increment institution count.
    if (shodan.org in reduction) {
        reduction[shodan.org].count += 1;
    } else {
        reduction[shodan.org] = {
            count: 1,
            ports: {}
        };
    }

    // Increment port count.
    if (shodan.port in reduction[shodan.org].ports) {
        reduction[shodan.org].ports[shodan.port].count += 1;
    } else {
        reduction[shodan.org].ports[shodan.port] = {
            count: 1
        };
    }
});

// Report.
rl.on('close', function() {
    // Create sorting function.
    function sorty(a, b) {
        return b.count - a.count;
    }

    // Sort organizations.
    var orgs = [];
    for (var org in reduction) {

        // Sort ports.
        var ports = [];
        for (var port in reduction[org].ports) {
            ports.push({"port": parseInt(port), "count": reduction[org].ports[port].count});
        }
        ports.sort(sorty);

        // Push sorted organization.
        orgs.push({"org": org, "count": reduction[org].count, "ports": ports});
    }
    orgs.sort(sorty);

    // Create output data for dual-chart plotting by c3.
    var out = [['x'], ['Total'], ['Vulnerable']];
    for (var org in orgs) {

        // Ignore < 6 ports.
        // if (orgs[org].count < 6) {
        //    continue;
        // }
    
        // Put in basic organization metrics.
        out[0].push(orgs[org].org);
        out[1].push(orgs[org].count);

        // Tally all vulnerable ports.
        var ports = 0;
        for (var port in orgs[org].ports) {
            if (vulnerablePorts.indexOf(orgs[org].ports[port].port) > -1) {
                ports += orgs[org].ports[port].count;
            }
        }

        // Insert port data.
        out[2].push(ports);
    }

    // Print sorted data.
    fs.writeFile('shodan-converted.json', JSON.stringify(out), 'utf8', function() {
        console.log("Written to shodan-converted.json"); 
    });
});